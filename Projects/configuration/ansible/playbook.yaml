# vi:syntax=yaml.ansible
---
- name: Windows setup
  hosts: windows
  gather_facts: false
  become: false
  tasks:
    # python modules will not work on a windows host,
    # see https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#can-i-run-python-modules-on-windows-hosts
    - name: Install Windows packages
      chocolatey.chocolatey.win_chocolatey:
        name:
          - 7zip
          - Firefox
          - Minikube
          - discord
          - docker
          - docker-cli
          - foobar2000
          - git
          - keepassxc
          - keybase
          - kubernetes-cli
          - mpv
          - obs
          - openjdk
          - powershell-core
          - python
          - sharpkeys
          - synergy
          - vim
          - vlc
          - vscode
          - winscp
          - wsl2
        state: present
    - name: install the Win32-OpenSSH service
      chocolatey.chocolatey.win_chocolatey:
        name: openssh
        package_params: /SSHServerFeature
        state: present
    # TODO: ensure key is installed, permission set
    # https://docs.ansible.com/ansible/2.9/modules/win_acl_module.html#win-acl-module
    # https://stackoverflow.com/questions/16212816/setting-up-openssh-for-windows-using-public-key-authentication/50502015#50502015
    - name: Set the default shell to PowerShell
      ansible.windows.win_regedit:
        path: HKLM:\SOFTWARE\OpenSSH
        name: DefaultShell
        data: 'C:\Program Files\powershell\7\pwsh.exe'
        type: string
        state: present
    - name: Enable remote desktop
      ansible.windows.win_regedit:
        path: 'HKLM:\System\CurrentControlSet\Control\Terminal Server'
        name: fDenyTSConnections
        data: 0
        type: dword
        state: present
    - name: Firewall rule to allow remote desktop
      community.windows.win_firewall_rule:
        name: Remote Desktop
        action: allow
        state: present
        enabled: yes
    - name: Upgrade installed packages
      chocolatey.chocolatey.win_chocolatey:
        name: all
        state: latest
    - name: Start WSL and get IP address
      win_command: "wsl hostname -I"
      changed_when: false
      register: wsl_hostname
    - name: Add portproxy to wsl for ssh IPv4
      win_command: "netsh interface portproxy add v4tov4 listenport=8022 connectaddress={{ wsl_hostname.stdout | trim }} connectport=8022"
      changed_when: false
    - name: Add portproxy to wsl for ssh IPv6
      win_command: "netsh interface portproxy add v6tov4 listenport=8022 connectaddress={{ wsl_hostname.stdout | trim }} connectport=8022"
      changed_when: false
    - name: Add firewall rule for wsl ssh
      community.windows.win_firewall_rule:
        name: WSL SSH
        localport: 8022
        action: allow
        direction: in
        protocol: tcp
        profiles: domain,private,public
        state: present
        enabled: yes
    - name: Start WSL SSH
      win_command: "wsl -u root service ssh start"
      changed_when: false
    - name: Add portproxy to wsl for mosh
      # mosh uses 60000..61000 but this means running this command 1001 times,
      # which hangs this process and you only need a small amount of ports if
      # you only forsee a small amount of connections, so we limit that
      win_shell: "60000..60005 | % { netsh routing ip nat add portmapping udp 0.0.0.0 $_ {{ wsl_hostname.stdout | trim }} $_ }"
      # there doesn't seem to be a difference between adding an existing rule or
      # not in terms of feedback
      changed_when: false
    - name: Add firewall rule for wsl mosh
      community.windows.win_firewall_rule:
        name: WSL Mosh
        localport: 60000-61000
        action: allow
        direction: in
        protocol: udp
        profiles: domain,private,public
        state: present
        enabled: yes
- name: Environment Setup
  hosts: posix
  gather_facts: true
  become: false
  environment:
    # ensure local bin is in path
    PATH: "{{ ansible_env.PATH }}:/home/{{ ansible_user_id }}/.local/bin"
  vars:
    linux_desktop: "{{ ('XDG_CURRENT_DESKTOP' in ansible_env) and (ansible_env.XDG_CURRENT_DESKTOP|length > 0) }}"
    thinkpad: "{{ ansible_product_version is regex('ThinkPad') }}"
  handlers:
    - name: restart_cockpit
      become: true
      ansible.builtin.service:
        name: cockpit
        state: restarted
    - name: restart_firewalld
      become: true
      ansible.builtin.service:
        name: firewalld
        state: restarted
    - name: restart_pcp
      become: true
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      loop:
        - pmcd
        - pmlogger
    - name: restart_sshd
      become: true
      ansible.builtin.service:
        name: sshd
        state: restarted
  tasks:
    - name: Install and configure platform specific settings
      include_tasks: "platform/{{ ansible_distribution }}.yaml"
    - name: Install hostess cli
      ansible.builtin.command:
        cmd: go get -u github.com/cbednarski/hostess
        creates: ~/.go/bin/hostess
      environment:
        GOPATH: "{{ ansible_env.HOME }}/.go"
    # Language package manager content, should be managed by a package config
    # file for contents rather than managed here
    - name: Register npm major version
      ansible.builtin.shell:
        cmd: |
          npm --version | awk 'BEGIN { FS = "." } ; { print $1 }'
      register: npm_version
      changed_when: false
    - name: NPM configuration (globalconfig) (versions <7)
      include_tasks: "npm/globalconfig.yaml"
      when: npm_version.stdout | int < 7
    - name: NPM configuration (userconfig) (versions 7+)
      include_tasks: "npm/userconfig.yaml"
      when: npm_version.stdout | int >= 7
    - name: Update composer packages
      # composer requires a modern amount of memory to update,
      # so only run on systems with 2gb or more
      when: ansible_memtotal_mb >= 2048
      community.general.composer:
        no_dev: false
        command: update
        global_command: true
      environment:
        COMPOSER_HOME: "{{ ansible_env.HOME }}/.config/composer"
    - name: package sources
      ansible.builtin.git:
        repo: https://github.com/{{ item.owner }}/{{ item.repo }}
        dest: ~/.local/src/{{ item.repo }}
        depth: 1
        force: true # disregard local changes
      loop:
        - owner: dexpota
          repo: kitty-themes
        - owner: kittykatt
          repo: screenfetch
        - owner: muennich
          repo: urxvt-perls
    - name: vim bundles
      ansible.builtin.git:
        repo: https://github.com/{{ item.owner }}/{{ item.repo }}
        dest: ~/.vim/bundle/{{ item.repo }}
        depth: 1
        force: true # disregard local changes
      loop:
        - owner: adelarsq
          repo: vim-matchit
        - owner: cespare
          repo: vim-toml
        - owner: chrisbra
          repo: csv.vim
        - owner: editorconfig
          repo: editorconfig-vim
        - owner: fatih
          repo: vim-go
        - owner: flazz
          repo: vim-colorschemes
        - owner: idanarye
          repo: vim-vebugger
        - owner: leafgarland
          repo: typescript-vim
        - owner: lumiliet
          repo: vim-twig
        - owner: martinda
          repo: jenkinsfile-vim-syntax
        - owner: mattn
          repo: emmet-vim
        - owner: pearofducks
          repo: ansible-vim
        - owner: plasticboy
          repo: vim-markdown
        - owner: quramy
          repo: tsuquyomi
        - owner: rust-lang
          repo: rust.vim
        - owner: ryanoasis
          repo: vim-devicons
        - owner: sbdchd
          repo: neoformat
        - owner: scrooloose
          repo: nerdtree
        - owner: shougo
          repo: vimproc.vim
        - owner: towolf
          repo: vim-helm
        - owner: tpope
          repo: vim-fugitive
        - owner: tpope
          repo: vim-liquid
        - owner: vim-syntastic
          repo: syntastic
- name: Non-local updates
  # localhost takes care of itself outside of ansible
  hosts: "posix:!localhost"
  gather_facts: false
  become: false
  tasks:
    - name: Check for yadm repo
      failed_when: false
      changed_when: false # command result is not a change
      ansible.builtin.command:
        cmd: "yadm status"
      register: yadm_status
    - name: Ensure yadm is up to date
      # only run if yadm status is valid
      when: "yadm_status.rc == 0"
      ansible.builtin.shell:
        cmd: "yadm fetch -a && yadm reset --hard && yadm merge origin/main"
      register: yadm_update
      changed_when: "yadm_update.stdout is not regex('Already up to date')"
